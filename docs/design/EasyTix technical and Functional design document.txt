# EasyTix Platform - Technical & Functional Design Document

**Version:** 1.0  
**Last Updated:** January 2025  
**Status:** MVP Development Phase

---

## Table of Contents

1. [Executive Summary](#executive-summary)
2. [Technical Architecture](#technical-architecture)
3. [Current Implementation Status](#current-implementation-status)
4. [Feature Specifications](#feature-specifications)
5. [Data Models & Database Schema](#data-models--database-schema)
6. [API Endpoints & Integration Points](#api-endpoints--integration-points)
7. [User Flows](#user-flows)
8. [Missing Features & Development Roadmap](#missing-features--development-roadmap)
9. [Technical Debt & Known Issues](#technical-debt--known-issues)
10. [Deployment & Infrastructure](#deployment--infrastructure)

---

## 1. Executive Summary

### Product Vision
EasyTix is a digital ticketing platform designed to replace paper tickets with instant SMS/email delivery for local and semi-professional sports events. The platform captures fan data with every purchase and provides QR code-based ticket validation.

### Core Value Propositions
- **For Fans:** Instant ticket delivery via SMS/email, no app required, QR code entry
- **For Organizers:** Fan data capture, real-time analytics, easy event management
- **For Admins:** Platform-wide oversight, pricing controls, audit trails

### Current Status
- **Phase:** MVP UI/UX Complete (Frontend Only)
- **Backend Status:** Not implemented - all data is mock/static
- **Database:** Not connected - no persistence layer
- **Authentication:** UI only - no actual auth implementation
- **Payment Processing:** Not implemented

---

## 2. Technical Architecture

### Tech Stack

#### Frontend
- **Framework:** Next.js 15 (App Router)
- **Language:** TypeScript
- **Styling:** Tailwind CSS v4
- **UI Components:** shadcn/ui (Radix UI primitives)
- **Fonts:** Geist Sans, Geist Mono
- **Icons:** Lucide React
- **Charts:** Recharts
- **State Management:** React hooks (no global state library yet)

#### Backend (NOT YET IMPLEMENTED)
- **Recommended:** Next.js API Routes / Server Actions
- **Database:** TBD (Supabase, Neon, or PostgreSQL recommended)
- **Authentication:** TBD (NextAuth.js, Supabase Auth, or Clerk recommended)
- **Payment Processing:** TBD (Stripe recommended)
- **SMS/Email:** TBD (Twilio for SMS, Resend/SendGrid for email)
- **File Storage:** TBD (Vercel Blob or Supabase Storage)

#### Development Tools
- **Package Manager:** npm
- **Type Checking:** TypeScript strict mode
- **Linting:** ESLint (Next.js config)
- **Deployment:** Vercel (recommended)

### Project Structure

\`\`\`
easytix-landing/
├── app/                          # Next.js App Router pages
│   ├── about/                    # About page
│   ├── admin/                    # Admin dashboard (super admin)
│   │   ├── layout.tsx           # Shared admin layout with sidebar
│   │   ├── page.tsx             # Admin dashboard (analytics)
│   │   ├── config/              # Platform configuration
│   │   ├── overrides/           # Event pricing overrides
│   │   ├── audit/               # Audit logs
│   │   ├── users/               # Admin user management
│   │   ├── organizers/          # Organizer management
│   │   ├── payouts/             # Payout management
│   │   └── refunds/             # Refund management
│   ├── checkout/                # Ticket purchase flow
│   ├── events/                  # Event browsing
│   │   ├── page.tsx            # Event listing
│   │   └── [id]/               # Event detail page
│   ├── login/                   # Login page
│   ├── signup/                  # Signup page
│   ├── my-tickets/              # User ticket management
│   ├── orders/                  # Order confirmation
│   │   └── [id]/               # Order detail page
│   ├── organizer/               # Organizer portal
│   │   ├── onboarding/         # Organizer onboarding flow
│   │   ├── dashboard/          # Organizer dashboard
│   │   ├── scanner/            # QR code scanner
│   │   └── events/             # Event management
│   │       ├── create/         # Create new event
│   │       └── [id]/orders/    # View event orders
│   ├── layout.tsx              # Root layout
│   ├── page.tsx                # Homepage/landing
│   └── globals.css             # Global styles & design tokens
├── components/
│   ├── ui/                     # shadcn/ui components (50+ components)
│   ├── activity-feed.tsx       # Activity feed component
│   ├── event-card.tsx          # Event card component
│   └── theme-provider.tsx      # Theme provider (not implemented)
├── lib/
│   ├── utils.ts                # Utility functions (cn, etc.)
│   └── revenue-data.ts         # Mock revenue data for charts
├── hooks/
│   ├── use-mobile.tsx          # Mobile detection hook
│   └── use-toast.ts            # Toast notification hook
└── public/                     # Static assets (images)
\`\`\`

---

## 3. Current Implementation Status

### ✅ Completed (Frontend UI Only)

#### Public Pages
- **Homepage** (`/`)
  - Hero section with dramatic EASYTIX branding
  - Stats bar (98% faster delivery, 5x more fan data, etc.)
  - Features section (Instant Delivery, Fan Data, QR Scanning, Analytics)
  - How It Works section (3-step process)
  - CTA section
  - Footer with navigation links

- **About Page** (`/about`)
  - Hero section with mission statement
  - Mission & Vision cards
  - Founder story section
  - What Makes EasyTix Different (4 key differentiators)
  - Impact metrics with event images
  - Looking Ahead section
  - Dual CTA (fans and organizers)

- **Events Listing** (`/events`)
  - Grid layout of event cards
  - Search and filter UI (not functional)
  - Event categories (Sports, Music, Theater, etc.)
  - Mock event data displayed

- **Event Detail** (`/events/[id]`)
  - Event header with image, title, date, venue
  - Ticket type selection
  - Quantity selector
  - "Buy Tickets" CTA
  - Event description and details

- **Checkout** (`/checkout`)
  - Ticket summary
  - Customer information form (First Name, Last Name, Email, Phone)
  - Payment method selection UI (not functional)
  - Order total calculation
  - "Complete Purchase" button

- **Order Confirmation** (`/orders/[id]`)
  - Success animation
  - Order details display
  - QR code placeholder
  - Download/email ticket options

- **My Tickets** (`/my-tickets`)
  - User's purchased tickets list
  - QR code display for each ticket
  - Event details
  - Ticket status (Active, Used, Expired)

#### Authentication Pages
- **Login** (`/login`)
  - Email and password form
  - "Forgot password" link
  - "Sign up" link
  - Form validation UI

- **Signup** (`/signup`)
  - Name, email, password, phone fields
  - User type selection (Fan vs Organizer)
  - Terms acceptance checkbox
  - Form validation UI

#### Organizer Portal
- **Onboarding** (`/organizer/onboarding`)
  - Multi-step form
  - Organization details
  - Contact information
  - Bank account setup UI

- **Dashboard** (`/organizer/dashboard`)
  - Revenue overview
  - Upcoming events list
  - Recent orders table
  - Quick actions (Create Event, View Analytics)

- **Create Event** (`/organizer/events/create`)
  - Event details form (name, description, date, venue)
  - Ticket types and pricing
  - Event image upload UI
  - Publish/draft options

- **Event Orders** (`/organizer/events/[id]/orders`)
  - Orders table for specific event
  - Order status (Confirmed, Checked In, Refunded)
  - Customer information
  - Export functionality UI

- **Scanner** (`/organizer/scanner`)
  - QR code scanner interface
  - Camera access UI
  - Ticket validation display
  - Manual entry option

#### Admin Portal
- **Admin Layout** (`/admin/layout.tsx`)
  - Shared sidebar navigation
  - Header with dark mode toggle, notifications, user menu
  - Active route highlighting with usePathname()

- **Admin Dashboard** (`/admin`)
  - Platform-wide analytics
  - Revenue over time chart (LineChart with gradient)
  - Top 5 events chart (horizontal bar chart)
  - Key metrics (Total Revenue, Active Events, Total Tickets, Active Organizers)
  - Recent activity feed

- **Platform Config** (`/admin/config`)
  - Platform settings form
  - Fee structure configuration
  - Email/SMS templates
  - Feature flags

- **Event Overrides** (`/admin/overrides`)
  - Event-specific pricing overrides
  - Custom fee structures
  - Approval workflow UI

- **Audit Logs** (`/admin/audit`)
  - Activity log table
  - Filtering by user, action type, date
  - Export functionality

- **Admin Users** (`/admin/users`)
  - Admin user management table
  - Role assignment (Super Admin, Admin, Support)
  - User creation/editing modals
  - Permission management UI

- **Organizers** (`/admin/organizers`)
  - Organizer approval workflow
  - Organizer details view
  - Status management (Pending, Approved, Suspended)

- **Payouts** (`/admin/payouts`)
  - Payout queue management
  - Payout history
  - Manual payout triggers

- **Refunds** (`/admin/refunds`)
  - Refund request management
  - Approval workflow
  - Refund history

### ❌ Not Implemented (Backend & Functionality)

#### Critical Missing Features
1. **Database & Data Persistence**
   - No database connection
   - All data is mock/static
   - No data models or schemas defined

2. **Authentication & Authorization**
   - No actual user authentication
   - No session management
   - No role-based access control (RBAC)
   - No password hashing or security

3. **Payment Processing**
   - No Stripe or payment gateway integration
   - No payment capture
   - No refund processing
   - No payout distribution

4. **Ticket Generation & Delivery**
   - No QR code generation
   - No SMS delivery (Twilio)
   - No email delivery (Resend/SendGrid)
   - No ticket PDF generation

5. **QR Code Scanning & Validation**
   - Scanner UI exists but no validation logic
   - No ticket status updates
   - No duplicate entry prevention

6. **File Uploads**
   - Event image upload UI exists but no storage
   - No image processing or optimization

7. **Search & Filtering**
   - Event search UI exists but not functional
   - No full-text search implementation

8. **Real-time Features**
   - No real-time order updates
   - No live ticket sales tracking
   - No websocket connections

9. **Email/SMS Notifications**
   - No transactional emails
   - No SMS notifications
   - No notification preferences

10. **Analytics & Reporting**
    - Charts display mock data
    - No actual data aggregation
    - No export functionality

---

## 4. Feature Specifications

### 4.1 User Roles & Permissions

#### Fan (Customer)
- Browse events
- Purchase tickets
- View purchased tickets
- Receive tickets via SMS/email
- Access QR codes for entry

#### Organizer
- Create and manage events
- Set ticket prices and types
- View sales analytics
- Scan tickets at entry
- Manage refunds
- Receive payouts

#### Admin (Super Admin)
- Platform-wide analytics
- Manage all organizers
- Override pricing/fees
- View audit logs
- Manage admin users
- Process payouts and refunds

### 4.2 Event Management

#### Event Creation
**Fields:**
- Event name (required)
- Description (required)
- Event date & time (required)
- Venue name (required)
- Venue address (required)
- Event category (Sports, Music, Theater, etc.)
- Event image (required)
- Ticket types (multiple):
  - Type name (e.g., "General Admission", "VIP")
  - Price (required)
  - Quantity available (required)
  - Description (optional)

**Business Rules:**
- Organizers must be approved before creating events
- Events can be saved as drafts
- Published events appear in public listing
- Events cannot be deleted if tickets are sold (only archived)

#### Event Editing
- Organizers can edit event details before publication
- After publication, only description and image can be changed
- Ticket prices cannot be changed after first sale
- Quantity can be increased but not decreased below sold amount

### 4.3 Ticket Purchase Flow

#### Checkout Process
1. **Event Selection:** User selects event and ticket type
2. **Quantity Selection:** User selects number of tickets
3. **Customer Information:** User enters name, email, phone
4. **Payment:** User enters payment details (Stripe)
5. **Confirmation:** Order is created, payment is processed
6. **Delivery:** Tickets sent via SMS and email immediately

**Payment Processing:**
- Platform fee: 3% + $0.50 per ticket (configurable)
- Organizer receives: Ticket price - platform fee
- Payment captured immediately
- Refunds processed within 5-7 business days

**Ticket Delivery:**
- SMS sent to phone number with ticket link
- Email sent with ticket PDF attachment
- Tickets include QR code for entry
- Each ticket has unique ID and QR code

### 4.4 Ticket Validation

#### Scanner Functionality
- Organizer staff opens scanner page
- Camera scans QR code on ticket
- System validates ticket:
  - ✅ Valid: Ticket is for this event, not yet used
  - ❌ Invalid: Ticket already used, wrong event, or fake
- Ticket status updated to "Used" on successful scan
- Duplicate scans prevented

#### Manual Entry
- Staff can manually enter ticket ID
- Same validation logic applies

### 4.5 Analytics & Reporting

#### Organizer Dashboard Metrics
- Total revenue (all time, this month, this week)
- Tickets sold (by event, by ticket type)
- Upcoming events
- Recent orders
- Sales over time chart
- Top-selling events

#### Admin Dashboard Metrics
- Platform-wide revenue
- Total active events
- Total tickets sold
- Active organizers
- Revenue over time (last 30 days)
- Top 5 events by sales
- Recent platform activity

---

## 5. Data Models & Database Schema

### 5.1 Recommended Database Schema

**Note:** This schema is NOT YET IMPLEMENTED. This is a recommended structure for the developer to implement.

#### Users Table
\`\`\`sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  role VARCHAR(20) NOT NULL, -- 'fan', 'organizer', 'admin'
  email_verified BOOLEAN DEFAULT FALSE,
  phone_verified BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
\`\`\`

#### Organizers Table
\`\`\`sql
CREATE TABLE organizers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  organization_name VARCHAR(255) NOT NULL,
  organization_type VARCHAR(100), -- 'sports_league', 'venue', 'promoter'
  tax_id VARCHAR(50),
  bank_account_id VARCHAR(255), -- Stripe Connect account ID
  status VARCHAR(20) DEFAULT 'pending', -- 'pending', 'approved', 'suspended'
  approved_at TIMESTAMP,
  approved_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_organizers_user_id ON organizers(user_id);
CREATE INDEX idx_organizers_status ON organizers(status);
\`\`\`

#### Events Table
\`\`\`sql
CREATE TABLE events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organizer_id UUID REFERENCES organizers(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  category VARCHAR(50) NOT NULL, -- 'sports', 'music', 'theater', etc.
  event_date TIMESTAMP NOT NULL,
  venue_name VARCHAR(255) NOT NULL,
  venue_address TEXT NOT NULL,
  venue_city VARCHAR(100),
  venue_state VARCHAR(50),
  venue_zip VARCHAR(20),
  image_url TEXT,
  status VARCHAR(20) DEFAULT 'draft', -- 'draft', 'published', 'cancelled', 'completed'
  published_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_events_organizer_id ON events(organizer_id);
CREATE INDEX idx_events_status ON events(status);
CREATE INDEX idx_events_event_date ON events(event_date);
CREATE INDEX idx_events_category ON events(category);
\`\`\`

#### Ticket Types Table
\`\`\`sql
CREATE TABLE ticket_types (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  event_id UUID REFERENCES events(id) ON DELETE CASCADE,
  name VARCHAR(100) NOT NULL, -- 'General Admission', 'VIP', etc.
  description TEXT,
  price DECIMAL(10, 2) NOT NULL,
  quantity_available INTEGER NOT NULL,
  quantity_sold INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_ticket_types_event_id ON ticket_types(event_id);
\`\`\`

#### Orders Table
\`\`\`sql
CREATE TABLE orders (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  event_id UUID REFERENCES events(id),
  customer_email VARCHAR(255) NOT NULL,
  customer_first_name VARCHAR(100) NOT NULL,
  customer_last_name VARCHAR(100) NOT NULL,
  customer_phone VARCHAR(20) NOT NULL,
  subtotal DECIMAL(10, 2) NOT NULL,
  platform_fee DECIMAL(10, 2) NOT NULL,
  total DECIMAL(10, 2) NOT NULL,
  payment_intent_id VARCHAR(255), -- Stripe payment intent ID
  payment_status VARCHAR(20) DEFAULT 'pending', -- 'pending', 'completed', 'failed', 'refunded'
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_event_id ON orders(event_id);
CREATE INDEX idx_orders_payment_status ON orders(payment_status);
CREATE INDEX idx_orders_created_at ON orders(created_at);
\`\`\`

#### Tickets Table
\`\`\`sql
CREATE TABLE tickets (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id UUID REFERENCES orders(id) ON DELETE CASCADE,
  ticket_type_id UUID REFERENCES ticket_types(id),
  event_id UUID REFERENCES events(id),
  qr_code TEXT NOT NULL, -- Unique QR code data
  status VARCHAR(20) DEFAULT 'active', -- 'active', 'used', 'refunded', 'expired'
  used_at TIMESTAMP,
  used_by UUID REFERENCES users(id), -- Staff member who scanned
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_tickets_order_id ON tickets(order_id);
CREATE INDEX idx_tickets_event_id ON tickets(event_id);
CREATE INDEX idx_tickets_qr_code ON tickets(qr_code);
CREATE INDEX idx_tickets_status ON tickets(status);
\`\`\`

#### Pricing Overrides Table
\`\`\`sql
CREATE TABLE pricing_overrides (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  event_id UUID REFERENCES events(id) ON DELETE CASCADE,
  organizer_id UUID REFERENCES organizers(id),
  platform_fee_percentage DECIMAL(5, 2), -- Override platform fee %
  platform_fee_fixed DECIMAL(10, 2), -- Override fixed fee
  reason TEXT,
  approved_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_pricing_overrides_event_id ON pricing_overrides(event_id);
CREATE INDEX idx_pricing_overrides_organizer_id ON pricing_overrides(organizer_id);
\`\`\`

#### Audit Logs Table
\`\`\`sql
CREATE TABLE audit_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  action VARCHAR(100) NOT NULL, -- 'user_login', 'event_created', 'ticket_scanned', etc.
  entity_type VARCHAR(50), -- 'user', 'event', 'order', 'ticket'
  entity_id UUID,
  details JSONB, -- Additional context
  ip_address VARCHAR(45),
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id);
CREATE INDEX idx_audit_logs_action ON audit_logs(action);
CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at);
\`\`\`

#### Platform Configuration Table
\`\`\`sql
CREATE TABLE platform_config (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  key VARCHAR(100) UNIQUE NOT NULL,
  value TEXT NOT NULL,
  description TEXT,
  updated_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Default configuration values
INSERT INTO platform_config (key, value, description) VALUES
  ('platform_fee_percentage', '3.0', 'Platform fee percentage'),
  ('platform_fee_fixed', '0.50', 'Fixed platform fee per ticket'),
  ('max_tickets_per_order', '10', 'Maximum tickets per order'),
  ('refund_window_hours', '24', 'Hours before event to allow refunds');
\`\`\`

---

## 6. API Endpoints & Integration Points

### 6.1 Required API Endpoints

**Note:** These endpoints are NOT YET IMPLEMENTED. This is a recommended API structure.

#### Authentication
\`\`\`
POST   /api/auth/signup          - Create new user account
POST   /api/auth/login           - Login user
POST   /api/auth/logout          - Logout user
POST   /api/auth/forgot-password - Request password reset
POST   /api/auth/reset-password  - Reset password with token
GET    /api/auth/me              - Get current user
\`\`\`

#### Events
\`\`\`
GET    /api/events               - List all published events (public)
GET    /api/events/:id           - Get event details (public)
POST   /api/events               - Create new event (organizer)
PUT    /api/events/:id           - Update event (organizer)
DELETE /api/events/:id           - Delete/archive event (organizer)
GET    /api/events/:id/tickets   - Get available ticket types (public)
\`\`\`

#### Orders
\`\`\`
POST   /api/orders               - Create new order (checkout)
GET    /api/orders/:id           - Get order details
GET    /api/orders               - List user's orders
POST   /api/orders/:id/refund    - Request refund
\`\`\`

#### Tickets
\`\`\`
GET    /api/tickets              - List user's tickets
GET    /api/tickets/:id          - Get ticket details
POST   /api/tickets/:id/validate - Validate ticket (scanner)
GET    /api/tickets/:id/qr       - Get ticket QR code
\`\`\`

#### Organizers
\`\`\`
POST   /api/organizers           - Create organizer profile
GET    /api/organizers/:id       - Get organizer details
PUT    /api/organizers/:id       - Update organizer profile
GET    /api/organizers/:id/events - List organizer's events
GET    /api/organizers/:id/analytics - Get organizer analytics
\`\`\`

#### Admin
\`\`\`
GET    /api/admin/dashboard      - Get admin dashboard data
GET    /api/admin/organizers     - List all organizers
PUT    /api/admin/organizers/:id/approve - Approve organizer
GET    /api/admin/events         - List all events
GET    /api/admin/orders         - List all orders
GET    /api/admin/audit-logs     - Get audit logs
POST   /api/admin/pricing-overrides - Create pricing override
GET    /api/admin/config         - Get platform config
PUT    /api/admin/config         - Update platform config
\`\`\`

#### Payments (Stripe Webhooks)
\`\`\`
POST   /api/webhooks/stripe      - Handle Stripe webhook events
\`\`\`

### 6.2 Third-Party Integrations

#### Stripe (Payment Processing)
- **Purpose:** Process ticket payments, manage payouts to organizers
- **Implementation:** Stripe Checkout or Payment Intents API
- **Stripe Connect:** For organizer payouts
- **Webhooks:** Handle payment success, failure, refunds

#### Twilio (SMS Delivery)
- **Purpose:** Send tickets via SMS
- **Implementation:** Twilio Messaging API
- **Message Format:** "Your EasyTix ticket: [link to ticket]"

#### Resend or SendGrid (Email Delivery)
- **Purpose:** Send tickets and notifications via email
- **Implementation:** Transactional email API
- **Templates:**
  - Ticket delivery email
  - Order confirmation
  - Refund confirmation
  - Event reminders

#### Vercel Blob or Supabase Storage (File Storage)
- **Purpose:** Store event images
- **Implementation:** Upload API with image optimization

#### QR Code Generation
- **Library:** `qrcode` npm package
- **Purpose:** Generate unique QR codes for tickets
- **Format:** Ticket ID encoded in QR code

---

## 7. User Flows

### 7.1 Fan Purchase Flow

1. **Browse Events**
   - User visits `/events`
   - Sees list of upcoming events
   - Can filter by category, date, location

2. **Select Event**
   - User clicks on event card
   - Navigates to `/events/[id]`
   - Views event details, ticket types, pricing

3. **Select Tickets**
   - User selects ticket type
   - Chooses quantity
   - Clicks "Buy Tickets"

4. **Checkout**
   - Navigates to `/checkout`
   - Enters customer information (name, email, phone)
   - Enters payment details (Stripe)
   - Reviews order total
   - Clicks "Complete Purchase"

5. **Payment Processing**
   - Stripe processes payment
   - Order created in database
   - Tickets generated with unique QR codes

6. **Ticket Delivery**
   - SMS sent to phone with ticket link
   - Email sent with ticket PDF
   - User redirected to `/orders/[id]` confirmation page

7. **Access Tickets**
   - User can view tickets at `/my-tickets`
   - QR codes displayed for entry
   - Can download or forward tickets

### 7.2 Organizer Event Creation Flow

1. **Signup/Login**
   - User signs up as organizer
   - Completes onboarding at `/organizer/onboarding`
   - Enters organization details, bank account

2. **Approval**
   - Admin reviews organizer application
   - Approves or rejects in admin panel

3. **Create Event**
   - Organizer navigates to `/organizer/events/create`
   - Fills out event form:
     - Event details (name, description, date, venue)
     - Uploads event image
     - Creates ticket types with pricing
   - Saves as draft or publishes

4. **Publish Event**
   - Event appears in public listing
   - Fans can purchase tickets

5. **Monitor Sales**
   - Organizer views dashboard at `/organizer/dashboard`
   - Sees real-time sales, revenue, orders
   - Can view detailed orders at `/organizer/events/[id]/orders`

6. **Event Day**
   - Staff opens scanner at `/organizer/scanner`
   - Scans QR codes at entry
   - System validates tickets and prevents duplicates

7. **Post-Event**
   - Organizer receives payout (minus platform fee)
   - Can view final analytics and reports

### 7.3 Admin Management Flow

1. **Login**
   - Admin logs in at `/login`
   - Redirected to `/admin` dashboard

2. **Monitor Platform**
   - Views platform-wide analytics
   - Revenue, active events, ticket sales
   - Recent activity feed

3. **Approve Organizers**
   - Navigates to `/admin/organizers`
   - Reviews pending organizer applications
   - Approves or rejects

4. **Manage Pricing**
   - Navigates to `/admin/overrides`
   - Creates custom pricing for specific events/organizers
   - Sets custom platform fees

5. **Handle Refunds**
   - Navigates to `/admin/refunds`
   - Reviews refund requests
   - Approves or denies

6. **Process Payouts**
   - Navigates to `/admin/payouts`
   - Reviews payout queue
   - Triggers manual payouts if needed

7. **Audit Activity**
   - Navigates to `/admin/audit`
   - Views all platform activity
   - Filters by user, action, date

---

## 8. Missing Features & Development Roadmap

### Phase 1: Core Backend (Critical - 4-6 weeks)

#### Database Setup
- [ ] Choose database (Supabase, Neon, or PostgreSQL)
- [ ] Implement schema from Section 5
- [ ] Set up migrations
- [ ] Seed initial data (platform config, admin user)

#### Authentication
- [ ] Implement NextAuth.js or Supabase Auth
- [ ] User registration with email verification
- [ ] Login/logout functionality
- [ ] Password reset flow
- [ ] Role-based access control (RBAC)
- [ ] Session management

#### Event Management
- [ ] Create event API endpoint
- [ ] Update event API endpoint
- [ ] Delete/archive event API endpoint
- [ ] Event listing with pagination
- [ ] Event search and filtering
- [ ] Image upload and storage

#### Ticket Purchase
- [ ] Stripe integration setup
- [ ] Checkout API endpoint
- [ ] Payment processing
- [ ] Order creation
- [ ] Ticket generation with QR codes
- [ ] SMS delivery (Twilio)
- [ ] Email delivery (Resend/SendGrid)

#### Ticket Validation
- [ ] QR code scanning logic
- [ ] Ticket validation API endpoint
- [ ] Duplicate entry prevention
- [ ] Ticket status updates

### Phase 2: Organizer Features (3-4 weeks)

#### Organizer Onboarding
- [ ] Organizer registration flow
- [ ] Bank account connection (Stripe Connect)
- [ ] Admin approval workflow
- [ ] Email notifications for approval status

#### Organizer Dashboard
- [ ] Real-time sales analytics
- [ ] Revenue calculations
- [ ] Order management
- [ ] Export functionality (CSV, PDF)

#### Payout System
- [ ] Automatic payout calculations
- [ ] Stripe Connect payouts
- [ ] Payout history and tracking
- [ ] Payout notifications

### Phase 3: Admin Features (2-3 weeks)

#### Admin Dashboard
- [ ] Platform-wide analytics with real data
- [ ] Revenue aggregation
- [ ] Event and organizer metrics
- [ ] Activity feed with real-time updates

#### Platform Configuration
- [ ] Dynamic platform fee configuration
- [ ] Email/SMS template management
- [ ] Feature flags

#### Pricing Overrides
- [ ] Custom pricing per event/organizer
- [ ] Override approval workflow

#### Audit Logging
- [ ] Log all critical actions
- [ ] Audit log viewing and filtering
- [ ] Export audit logs

### Phase 4: Enhanced Features (4-6 weeks)

#### Refund System
- [ ] Refund request flow
- [ ] Admin refund approval
- [ ] Stripe refund processing
- [ ] Refund notifications

#### Advanced Analytics
- [ ] Sales trends over time
- [ ] Customer demographics
- [ ] Event performance comparisons
- [ ] Predictive analytics

#### Marketing Tools
- [ ] Email marketing campaigns
- [ ] SMS marketing campaigns
- [ ] Discount codes and promotions
- [ ] Referral program

#### Mobile Optimization
- [ ] Progressive Web App (PWA)
- [ ] Offline ticket access
- [ ] Push notifications

### Phase 5: Scale & Optimize (Ongoing)

#### Performance
- [ ] Database query optimization
- [ ] Caching strategy (Redis)
- [ ] CDN for static assets
- [ ] Image optimization

#### Security
- [ ] Security audit
- [ ] Rate limiting
- [ ] DDoS protection
- [ ] PCI compliance review

#### Testing
- [ ] Unit tests
- [ ] Integration tests
- [ ] End-to-end tests
- [ ] Load testing

#### Monitoring
- [ ] Error tracking (Sentry)
- [ ] Performance monitoring
- [ ] Uptime monitoring
- [ ] Analytics (Vercel Analytics, Google Analytics)

---

## 9. Technical Debt & Known Issues

### Current Issues

1. **FormControl Void Element Error**
   - **Issue:** Using Radix UI's `Slot` in FormControl causes "input is a void element" errors
   - **Workaround:** Removed FormControl from Input components in checkout page
   - **Proper Fix:** Refactor form components to not use Slot for input elements

2. **Mock Data Everywhere**
   - **Issue:** All data is hardcoded or mock data
   - **Impact:** No persistence, no real functionality
   - **Fix:** Implement database and API endpoints

3. **No Error Handling**
   - **Issue:** No try/catch blocks, no error boundaries
   - **Impact:** App will crash on errors
   - **Fix:** Add error boundaries and proper error handling

4. **No Loading States**
   - **Issue:** No loading indicators for async operations
   - **Impact:** Poor UX during data fetching
   - **Fix:** Add loading skeletons and spinners

5. **No Form Validation**
   - **Issue:** Forms have UI validation but no actual validation logic
   - **Impact:** Invalid data could be submitted
   - **Fix:** Implement Zod schemas and validation

6. **No Responsive Testing**
   - **Issue:** Limited testing on mobile devices
   - **Impact:** Potential layout issues on small screens
   - **Fix:** Comprehensive responsive testing

7. **Duplicate Navigation Code**
   - **Issue:** Admin pages had duplicate sidebar/header code
   - **Status:** Fixed with shared layout.tsx
   - **Remaining:** Ensure all pages use layout correctly

8. **No Accessibility Audit**
   - **Issue:** No comprehensive accessibility testing
   - **Impact:** May not be usable for users with disabilities
   - **Fix:** WCAG 2.1 AA compliance audit

### Design Decisions to Review

1. **Color Scheme**
   - Current: Vibrant orange primary
   - Consider: User testing for brand perception

2. **Typography**
   - Current: Geist Sans/Mono
   - Consider: Performance impact of custom fonts

3. **Component Library**
   - Current: shadcn/ui (50+ components)
   - Consider: Bundle size optimization

4. **State Management**
   - Current: React hooks only
   - Consider: Zustand or Jotai for complex state

---

## 10. Deployment & Infrastructure

### Current Deployment
- **Platform:** Not yet deployed
- **Recommended:** Vercel (optimized for Next.js)

### Recommended Infrastructure

#### Production Environment
- **Hosting:** Vercel (Next.js optimized)
- **Database:** Supabase or Neon (PostgreSQL)
- **File Storage:** Vercel Blob or Supabase Storage
- **Email:** Resend or SendGrid
- **SMS:** Twilio
- **Payments:** Stripe
- **Monitoring:** Vercel Analytics, Sentry
- **CDN:** Vercel Edge Network

#### Environment Variables
\`\`\`env
# Database
DATABASE_URL=

# Authentication
NEXTAUTH_URL=
NEXTAUTH_SECRET=

# Stripe
STRIPE_SECRET_KEY=
STRIPE_PUBLISHABLE_KEY=
STRIPE_WEBHOOK_SECRET=

# Twilio
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_PHONE_NUMBER=

# Email
RESEND_API_KEY=

# File Storage
BLOB_READ_WRITE_TOKEN=
\`\`\`

#### CI/CD Pipeline
- **Git:** GitHub
- **Deployment:** Automatic on push to main (Vercel)
- **Preview:** Automatic preview deployments for PRs
- **Testing:** GitHub Actions for tests

#### Monitoring & Logging
- **Error Tracking:** Sentry
- **Performance:** Vercel Analytics
- **Uptime:** Vercel Monitoring
- **Logs:** Vercel Logs

---

## Appendix A: Design System

### Color Palette
- **Primary:** `oklch(0.65 0.22 35)` - Vibrant Orange (#FF6B35)
- **Background (Light):** `oklch(1 0 0)` - White
- **Background (Dark):** `oklch(0.12 0 0)` - Deep Charcoal (#1A1A1A)
- **Foreground (Light):** `oklch(0.145 0 0)` - Near Black
- **Foreground (Dark):** `oklch(0.985 0 0)` - Near White
- **Accent:** `oklch(0.95 0.08 35)` - Light Orange Tint

### Typography
- **Font Family:** Geist Sans (body), Geist Mono (code)
- **Hero Titles:** text-7xl to text-9xl, font-black, uppercase
- **Section Headings:** text-3xl to text-5xl, font-black
- **Body Text:** text-lg to text-xl, leading-relaxed

### Spacing
- **Container:** mx-auto, px-4
- **Section Padding:** py-16 md:py-24
- **Card Padding:** p-6
- **Gap:** gap-4, gap-6, gap-8

### Border Radius
- **Default:** 0.625rem (10px)
- **Cards:** rounded-lg
- **Buttons:** rounded-md

---

## Appendix B: Component Inventory

### UI Components (shadcn/ui)
- Accordion, Alert, Alert Dialog, Avatar, Badge, Breadcrumb
- Button, Calendar, Card, Carousel, Chart, Checkbox
- Collapsible, Command, Context Menu, Dialog, Drawer
- Dropdown Menu, Form, Hover Card, Input, Input OTP
- Label, Menubar, Navigation Menu, Pagination, Popover
- Progress, Radio Group, Resizable, Scroll Area, Select
- Separator, Sheet, Sidebar, Skeleton, Slider, Sonner
- Switch, Table, Tabs, Textarea, Toast, Toaster
- Toggle, Toggle Group, Tooltip

### Custom Components
- `activity-feed.tsx` - Activity feed for admin dashboard
- `event-card.tsx` - Event card for event listing
- `theme-provider.tsx` - Theme provider (not implemented)

---

## Appendix C: File Structure Reference

\`\`\`
easytix-landing/
├── app/
│   ├── about/page.tsx                    # About page
│   ├── admin/
│   │   ├── layout.tsx                   # Admin layout with sidebar
│   │   ├── page.tsx                     # Admin dashboard
│   │   ├── audit/page.tsx               # Audit logs
│   │   ├── config/page.tsx              # Platform config
│   │   ├── organizers/page.tsx          # Organizer management
│   │   ├── overrides/
│   │   │   ├── page.tsx                # Pricing overrides
│   │   │   └── loading.tsx             # Loading state
│   │   ├── payouts/page.tsx             # Payout management
│   │   ├── refunds/page.tsx             # Refund management
│   │   └── users/
│   │       ├── page.tsx                # Admin users
│   │       └── loading.tsx             # Loading state
│   ├── checkout/page.tsx                # Checkout page
│   ├── events/
│   │   ├── page.tsx                    # Event listing
│   │   ├── loading.tsx                 # Loading state
│   │   └── [id]/page.tsx               # Event detail
│   ├── login/page.tsx                   # Login page
│   ├── my-tickets/page.tsx              # User tickets
│   ├── orders/[id]/page.tsx             # Order confirmation
│   ├── organizer/
│   │   ├── dashboard/page.tsx          # Organizer dashboard
│   │   ├── events/
│   │   │   ├── create/page.tsx        # Create event
│   │   │   └── [id]/orders/page.tsx   # Event orders
│   │   ├── onboarding/page.tsx         # Organizer onboarding
│   │   └── scanner/page.tsx            # QR scanner
│   ├── signup/page.tsx                  # Signup page
│   ├── layout.tsx                       # Root layout
│   ├── page.tsx                         # Homepage
│   └── globals.css                      # Global styles
├── components/
│   ├── ui/                              # shadcn/ui components (50+)
│   ├── activity-feed.tsx               # Activity feed
│   ├── event-card.tsx                  # Event card
│   └── theme-provider.tsx              # Theme provider
├── lib/
│   ├── utils.ts                        # Utility functions
│   └── revenue-data.ts                 # Mock revenue data
├── hooks/
│   ├── use-mobile.tsx                  # Mobile detection
│   └── use-toast.ts                    # Toast notifications
├── public/                              # Static assets
├── package.json                         # Dependencies
├── tsconfig.json                        # TypeScript config
└── next.config.mjs                      # Next.js config
\`\`\`

---

## Document Version History

| Version | Date | Author | Changes |
|---------|------|--------|---------|
| 1.0 | January 2025 | v0 | Initial document creation |

---

**End of Document**

