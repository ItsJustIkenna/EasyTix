// EasyTix Database Schema
// PostgreSQL recommended for ACID compliance and JSON support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole @default(CUSTOMER)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)

  // Relationships
  orders        Order[]
  tickets       Ticket[]
  organizers    Organizer[] // Can belong to multiple organizer teams
  admin         Admin?      // Optional: user might be an admin
  
  @@index([email])
}

enum UserRole {
  CUSTOMER
  ORGANIZER
  ADMIN
}

// ============================================================================
// ORGANIZER & TEAM MANAGEMENT
// ============================================================================

model Organizer {
  id                String   @id @default(cuid())
  businessName      String
  businessEmail     String
  businessPhone     String
  
  // Stripe Connect account for payouts
  stripeAccountId   String?  @unique
  stripeOnboarded   Boolean  @default(false)
  
  // Subscription for free events (optional)
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  subscriptionEndsAt DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  events            Event[]
  teamMembers       User[]   // Many-to-many: organizers can have multiple users
  payouts           Payout[]
  
  @@index([stripeAccountId])
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
}

// ============================================================================
// EVENT MANAGEMENT
// ============================================================================

model Event {
  id                String   @id @default(cuid())
  organizerId       String
  
  // Event Details
  title             String
  description       String   @db.Text
  venue             String
  address           String
  city              String
  state             String
  zipCode           String
  
  // Date & Time
  startDate         DateTime
  endDate           DateTime
  timezone          String   @default("America/New_York")
  
  // Visibility & Status
  status            EventStatus @default(DRAFT)
  publishedAt       DateTime?
  
  // Media
  coverImage        String?
  images            String[] // Array of image URLs
  
  // Pricing Configuration
  isFree            Boolean  @default(false)
  currency          String   @default("USD")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  organizer         Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  ticketTiers       TicketTier[]
  orders            Order[]
  tickets           Ticket[]
  promoCodes        PromoCode[]
  pricingOverride   EventPricingOverride?
  
  @@index([organizerId])
  @@index([startDate])
  @@index([status])
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

// ============================================================================
// TICKET TIERS & INVENTORY
// ============================================================================

model TicketTier {
  id                String   @id @default(cuid())
  eventId           String
  
  // Tier Details
  name              String   // e.g., "General Admission", "VIP", "Early Bird"
  description       String?
  
  // Pricing (in cents to avoid floating point issues)
  basePrice         Int      // What organizer sets (e.g., 5000 = $50.00)
  platformMarkup    Int      // What you add on top (e.g., 500 = $5.00)
  platformFee       Int      // Separate buyer fee (e.g., 250 = $2.50)
  
  // Calculated at purchase time based on above
  // totalPrice = basePrice + platformMarkup + platformFee
  
  // Inventory
  totalQuantity     Int
  soldQuantity      Int      @default(0)
  
  // Sale Period
  saleStartDate     DateTime?
  saleEndDate       DateTime?
  
  // Features
  isActive          Boolean  @default(true)
  sortOrder         Int      @default(0) // Display order
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets           Ticket[]
  orderItems        OrderItem[]
  
  @@index([eventId])
  @@index([isActive])
}

// ============================================================================
// ORDERS & PAYMENTS
// ============================================================================

model Order {
  id                String   @id @default(cuid())
  orderNumber       String   @unique // Human-readable (e.g., "ET-2024-001234")
  
  userId            String
  eventId           String
  
  // Payment Details
  subtotal          Int      // Sum of (basePrice + platformMarkup) for all items
  platformFees      Int      // Sum of platformFee for all items
  promoDiscount     Int      @default(0)
  total             Int      // subtotal + platformFees - promoDiscount
  
  currency          String   @default("USD")
  
  // Stripe Payment
  stripePaymentIntentId String? @unique
  paymentStatus     PaymentStatus @default(PENDING)
  paidAt            DateTime?
  
  // Promo Code
  promoCodeId       String?
  
  // Contact Info (captured at checkout)
  buyerEmail        String
  buyerPhone        String
  buyerFirstName    String
  buyerLastName     String
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  user              User     @relation(fields: [userId], references: [id])
  event             Event    @relation(fields: [eventId], references: [id])
  promoCode         PromoCode? @relation(fields: [promoCodeId], references: [id])
  items             OrderItem[]
  tickets           Ticket[]
  refunds           Refund[]
  
  @@index([userId])
  @@index([eventId])
  @@index([orderNumber])
  @@index([paymentStatus])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model OrderItem {
  id                String   @id @default(cuid())
  orderId           String
  ticketTierId      String
  
  quantity          Int
  unitPrice         Int      // basePrice + platformMarkup at time of purchase
  platformFee       Int      // platformFee per ticket at time of purchase
  subtotal          Int      // unitPrice * quantity
  
  createdAt         DateTime @default(now())

  // Relationships
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  ticketTier        TicketTier @relation(fields: [ticketTierId], references: [id])
  
  @@index([orderId])
}

// ============================================================================
// TICKETS & QR CODES
// ============================================================================

model Ticket {
  id                String   @id @default(cuid())
  ticketNumber      String   @unique // Human-readable (e.g., "TIX-2024-001234")
  qrCode            String   @unique // UUID or secure random string
  
  orderId           String
  eventId           String
  ticketTierId      String
  userId            String   // Current owner (for transfers)
  originalUserId    String   // Original purchaser
  
  // Validation
  status            TicketStatus @default(VALID)
  scannedAt         DateTime?
  scannedBy         String?  // User ID of scanner
  
  // Transfer tracking
  transferredAt     DateTime?
  transferredFrom   String?  // User ID
  transferredTo     String?  // User ID
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  order             Order    @relation(fields: [orderId], references: [id])
  event             Event    @relation(fields: [eventId], references: [id])
  ticketTier        TicketTier @relation(fields: [ticketTierId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
  
  @@index([qrCode])
  @@index([orderId])
  @@index([userId])
  @@index([eventId])
  @@index([status])
}

enum TicketStatus {
  VALID
  SCANNED
  CANCELLED
  REFUNDED
}

// ============================================================================
// PROMO CODES
// ============================================================================

model PromoCode {
  id                String   @id @default(cuid())
  eventId           String
  
  code              String   // e.g., "EARLYBIRD"
  description       String?
  
  // Discount Type
  discountType      DiscountType
  discountValue     Int      // Percentage (e.g., 20) or fixed amount in cents (e.g., 1000 = $10)
  
  // Usage Limits
  maxUses           Int?     // Null = unlimited
  currentUses       Int      @default(0)
  
  // Validity Period
  validFrom         DateTime?
  validUntil        DateTime?
  
  isActive          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  orders            Order[]
  
  @@unique([eventId, code])
  @@index([code])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// ============================================================================
// REFUNDS
// ============================================================================

model Refund {
  id                String   @id @default(cuid())
  orderId           String
  
  amount            Int      // Amount refunded in cents
  reason            String?
  status            RefundStatus @default(PENDING)
  
  stripeRefundId    String?  @unique
  
  initiatedBy       String   // User ID (organizer who initiated)
  processedAt       DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  order             Order    @relation(fields: [orderId], references: [id])
  
  @@index([orderId])
}

enum RefundStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
}

// ============================================================================
// PAYOUTS TO ORGANIZERS
// ============================================================================

model Payout {
  id                String   @id @default(cuid())
  organizerId       String
  
  // Payout Details
  amount            Int      // Amount in cents (organizer's basePrice * tickets sold)
  currency          String   @default("USD")
  
  // Related Event (payouts happen per event after event ends)
  eventId           String
  eventTitle        String   // Denormalized for easy reference
  eventDate         DateTime
  
  // Stripe Transfer
  stripeTransferId  String?  @unique
  status            PayoutStatus @default(PENDING)
  
  paidAt            DateTime?
  failureReason     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  organizer         Organizer @relation(fields: [organizerId], references: [id])
  
  @@index([organizerId])
  @@index([status])
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

// ============================================================================
// PLATFORM CONFIGURATION (Admin Control Center)
// ============================================================================

model PlatformConfig {
  id                String   @id @default(cuid())
  
  // Fee Configuration (in basis points for precision)
  // 100 basis points = 1%
  // Rule: Total platform take ≤ 10% of base price
  defaultPlatformFeePercent    Int      @default(300)  // 3% visible to buyer
  defaultPlatformFeeFixed      Int      @default(0)    // $0 fixed fee
  defaultPlatformMarkupPercent Int      @default(700)  // 7% hidden markup
  // Total: 10% max (3% + 7% = 10%)
  
  // Free Event Subscription
  freeEventMonthlyFee          Int      @default(2999) // $29.99 in cents
  
  // Business Rules
  minTicketPrice               Int      @default(100)  // $1.00 minimum
  maxTicketPrice               Int      @default(1000000) // $10,000 max
  maxTicketsPerOrder           Int      @default(10)
  
  // Payout Rules
  payoutDelayHours             Int      @default(24)   // Wait 24hrs after event
  minimumPayoutAmount          Int      @default(1000) // $10 minimum payout
  
  // Feature Flags
  allowTransfers               Boolean  @default(true)
  allowPromoCodes              Boolean  @default(true)
  allowGroupDiscounts          Boolean  @default(false)
  requireOrganizerApproval     Boolean  @default(false)
  
  // Maintenance Mode
  maintenanceMode              Boolean  @default(false)
  maintenanceMessage           String?
  
  // Version tracking
  version                      Int      @default(1)
  isActive                     Boolean  @default(true)
  
  effectiveFrom                DateTime @default(now())
  effectiveUntil               DateTime?
  
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  createdBy                    String   // Admin user ID
  
  @@index([isActive, effectiveFrom])
}

model EventPricingOverride {
  id                String   @id @default(cuid())
  eventId           String   @unique
  
  // Custom fees for this specific event
  // Null = use platform defaults from PlatformConfig
  platformFeePercent    Int?
  platformFeeFixed      Int?
  platformMarkupPercent Int?
  
  // Reason for override (internal notes)
  reason                String?
  
  approvedBy            String   // Admin user ID
  createdAt             DateTime @default(now())
  
  // Relationships
  event                 Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@index([eventId])
}

// Add relationship to Event model
// Add this line to the Event model above:
// pricingOverride  EventPricingOverride?

// ============================================================================
// ADMIN MANAGEMENT & AUDIT TRAIL
// ============================================================================

model Admin {
  id                String   @id @default(cuid())
  userId            String   @unique // Links to User table
  role              AdminRole
  
  permissions       String[] // Array of permission strings
  
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?  // Admin who created this admin
  
  // Relationships
  user              User     @relation(fields: [userId], references: [id])
  auditLogs         AuditLog[]
  
  @@index([userId])
  @@index([role])
}

enum AdminRole {
  SUPER_ADMIN      // Full system access
  FINANCE_ADMIN    // Payouts, refunds, financial reports
  SUPPORT_ADMIN    // Customer support, view orders, issue refunds
  CONTENT_ADMIN    // Manage events, organizers (not financial)
}

model AuditLog {
  id                String   @id @default(cuid())
  
  adminId           String
  action            AuditAction
  
  // What was changed
  entityType        String   // "PlatformConfig", "EventPricingOverride", "Refund", etc.
  entityId          String   // ID of the affected record
  
  // Before/After snapshots (JSON)
  previousValue     Json?
  newValue          Json?
  
  // Context
  ipAddress         String?
  userAgent         String?
  reason            String?  // Why this change was made
  
  createdAt         DateTime @default(now())
  
  // Relationships
  admin             Admin    @relation(fields: [adminId], references: [id])
  
  @@index([adminId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([action])
}

enum AuditAction {
  CONFIG_CREATED
  CONFIG_UPDATED
  CONFIG_DEACTIVATED
  PRICING_OVERRIDE_CREATED
  PRICING_OVERRIDE_DELETED
  REFUND_ISSUED
  PAYOUT_TRIGGERED
  PAYOUT_FAILED
  ORGANIZER_APPROVED
  ORGANIZER_SUSPENDED
  EVENT_CANCELLED
  ADMIN_CREATED
  ADMIN_ROLE_CHANGED
  ADMIN_DEACTIVATED
}
