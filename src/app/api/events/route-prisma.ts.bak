import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireOrganizer } from "@/lib/middleware";

/**
 * GET /api/events
 * Get all published events (public endpoint)
 */
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const page = parseInt(searchParams.get("page") || "1");
    const limit = parseInt(searchParams.get("limit") || "12");
    const search = searchParams.get("search") || "";
    const category = searchParams.get("category") || "";
    const city = searchParams.get("city") || "";
    const status = searchParams.get("status") || "PUBLISHED";

    const skip = (page - 1) * limit;

    // Build where clause
    const where: any = {};

    // Only show published events for public API
    if (status) {
      where.status = status;
    }

    // Search by title or description
    if (search) {
      where.OR = [
        { title: { contains: search, mode: "insensitive" } },
        { description: { contains: search, mode: "insensitive" } },
      ];
    }

    // Filter by city
    if (city) {
      where.city = { contains: city, mode: "insensitive" };
    }

    // Get events with pagination
    const [events, total] = await Promise.all([
      prisma.event.findMany({
        where,
        include: {
          organizer: {
            select: {
              id: true,
              businessName: true,
            },
          },
          ticketTiers: {
            select: {
              id: true,
              name: true,
              basePrice: true,
              platformMarkup: true,
              platformFee: true,
              totalQuantity: true,
              soldQuantity: true,
            },
          },
          _count: {
            select: {
              ticketTiers: true,
            },
          },
        },
        orderBy: { startDate: "asc" },
        skip,
        take: limit,
      }),
      prisma.event.count({ where }),
    ]);

    return NextResponse.json({
      success: true,
      data: {
        events,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit),
        },
      },
    });
  } catch (error) {
    console.error("Get events error:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to fetch events",
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/events
 * Create a new event (organizer/admin only)
 */
export async function POST(req: NextRequest) {
  try {
    // Authenticate and require organizer role
    const authResult = await requireOrganizer(req);
    if (authResult.error) {
      return authResult.error;
    }

    const user = authResult.user!;
    const body = await req.json();

    const {
      organizerId,
      title,
      description,
      venue,
      address,
      city,
      state,
      zipCode,
      startDate,
      endDate,
      timezone,
      coverImage,
      images,
      isFree,
      currency,
      ticketTiers,
    } = body;

    // Validate required fields
    if (
      !organizerId ||
      !title ||
      !description ||
      !venue ||
      !address ||
      !city ||
      !state ||
      !zipCode ||
      !startDate ||
      !endDate
    ) {
      return NextResponse.json(
        {
          success: false,
          error: "Missing required fields",
        },
        { status: 400 }
      );
    }

    // Verify user has access to this organizer
    if (user.role !== "ADMIN") {
      const hasAccess = await prisma.organizer.findFirst({
        where: {
          id: organizerId,
          teamMembers: {
            some: {
              id: user.userId,
            },
          },
        },
      });

      if (!hasAccess) {
        return NextResponse.json(
          {
            success: false,
            error: "You do not have access to this organizer",
          },
          { status: 403 }
        );
      }
    }

    // Create event with ticket tiers
    const event = await prisma.event.create({
      data: {
        organizerId,
        title,
        description,
        venue,
        address,
        city,
        state,
        zipCode,
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        timezone: timezone || "America/New_York",
        coverImage,
        images: images || [],
        isFree: isFree || false,
        currency: currency || "USD",
        status: "DRAFT",
        ticketTiers: ticketTiers
          ? {
              create: ticketTiers.map((tier: any) => ({
                name: tier.name,
                description: tier.description,
                basePrice: tier.basePrice,
                platformMarkup: tier.platformMarkup || 0,
                platformFee: tier.platformFee || 0,
                totalQuantity: tier.totalQuantity,
                saleStartDate: tier.saleStartDate
                  ? new Date(tier.saleStartDate)
                  : undefined,
                saleEndDate: tier.saleEndDate
                  ? new Date(tier.saleEndDate)
                  : undefined,
                sortOrder: tier.sortOrder || 0,
              })),
            }
          : undefined,
      },
      include: {
        organizer: {
          select: {
            id: true,
            businessName: true,
          },
        },
        ticketTiers: true,
      },
    });

    return NextResponse.json(
      {
        success: true,
        data: event,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Create event error:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to create event",
      },
      { status: 500 }
    );
  }
}